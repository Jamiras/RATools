using RATools.Parser.Expressions;
using RATools.Parser.Internal;
using System.Diagnostics;

namespace RATools.Parser.Functions
{
    internal class AchievementFunction : FunctionDefinitionExpression
    {
        public AchievementFunction()
            : base("achievement")
        {
            // required parameters
            Parameters.Add(new VariableDefinitionExpression("title"));
            Parameters.Add(new VariableDefinitionExpression("description"));
            Parameters.Add(new VariableDefinitionExpression("points"));
            Parameters.Add(new VariableDefinitionExpression("trigger"));

            // additional parameters generated by dumper
            Parameters.Add(new VariableDefinitionExpression("id"));
            DefaultParameters["id"] = new IntegerConstantExpression(0);
            Parameters.Add(new VariableDefinitionExpression("published"));
            DefaultParameters["published"] = new StringConstantExpression("");
            Parameters.Add(new VariableDefinitionExpression("modified"));
            DefaultParameters["modified"] = new StringConstantExpression("");
            Parameters.Add(new VariableDefinitionExpression("badge"));
            DefaultParameters["badge"] = new StringConstantExpression("0");
        }

        public override bool Evaluate(InterpreterScope scope, out ExpressionBase result)
        {
            var achievement = new ScriptInterpreterAchievementBuilder();

            var stringExpression = GetStringParameter(scope, "title", out result);
            if (stringExpression == null)
                return false;
            achievement.Title = stringExpression.Value;

            stringExpression = GetStringParameter(scope, "description", out result);
            if (stringExpression == null)
                return false;
            achievement.Description = stringExpression.Value;

            stringExpression = GetStringParameter(scope, "badge", out result);
            if (stringExpression == null)
                return false;
            achievement.BadgeName = stringExpression.Value;

            var integerExpression = GetIntegerParameter(scope, "points", out result);
            if (integerExpression == null)
                return false;
            achievement.Points = integerExpression.Value;

            integerExpression = GetIntegerParameter(scope, "id", out result);
            if (integerExpression == null)
                return false;
            achievement.Id = integerExpression.Value;

            stringExpression = GetStringParameter(scope, "published", out result);
            if (stringExpression != null && !string.IsNullOrEmpty(stringExpression.Value))
                achievement.IsDumped = true;

            var trigger = GetRequirementParameter(scope, "trigger", out result);
            if (trigger == null)
                return false;

            if (!TriggerBuilderContext.ProcessAchievementConditions(achievement, trigger, scope, out result))
            {
                if (result.Location.Start != trigger.Location.Start || result.Location.End != trigger.Location.End)
                {
                    var error = (ErrorExpression)result;
                    result = new ErrorExpression(error.Message, trigger) { InnerError = error };
                }

                return false;
            }

            var sourceLine = 0;
            var newAchievement = achievement.ToAchievement();
            var functionCall = scope.GetOutermostContext<FunctionCallExpression>();
            if (functionCall != null)
                sourceLine = functionCall.Location.Start.Line;

            var context = scope.GetContext<AchievementScriptContext>();
            Debug.Assert(context != null);
            context.Achievements[newAchievement] = sourceLine;
            return true;
        }
    }
}
